// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum WorkshopStatus {
  disponible
  pocos_cupos
  agotado
}

model Workshop {
  id                String         @id @default(cuid())
  title             String
  description       String
  price             Decimal
  date              DateTime
  schedule          String
  classCount        Int
  maxCapacity       Int
  currentBookings   Int            @default(0)
  location          String
  materialsIncluded Boolean        @default(true)
  status            WorkshopStatus @default(disponible)
  orderItems        OrderItem[]
}

enum ProductCategory {
  Decoración
  Vajilla
  Joyería
  Otros
}

enum ProductStatus {
  publicado
  borrador
  agotado
}

model Dimension {
  id        String   @id @default(cuid())
  length    Decimal
  width     Decimal
  height    Decimal
  product   Product?
}

model Product {
  id            String          @id @default(cuid())
  name          String
  description   String
  price         Decimal
  sku           String          @unique
  stockQuantity Int
  category      ProductCategory
  weight_kg     Decimal
  images        String
  status        ProductStatus   @default(publicado)
  orderItems    OrderItem[]
  dimensionId   String?         @unique
  dimension     Dimension?      @relation(fields: [dimensionId], references: [id])
}

model ShippingAddress {
  id         String @id @default(cuid())
  address    String
  city       String
  postalCode String
  country    String
  order      Order?
}

model Order {
  id                String         @id @default(cuid())
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  orderItems        OrderItem[]
  shippingAddressId String?        @unique
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  paymentMethod     String
  totalPrice        Decimal
  isPaid            Boolean        @default(false)
  paidAt            DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model OrderItem {
  id         String    @id @default(cuid())
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product?  @relation(fields: [productId], references: [id])
  productId  String?
  workshop   Workshop? @relation(fields: [workshopId], references: [id])
  workshopId String?
  quantity   Int
  price      Decimal // Price at the time of purchase
}
